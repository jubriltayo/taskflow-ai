## PROJECT CONTEXT
This is a Next.js 15 task management application built with TypeScript, Prisma, and shadcn/ui.
The goal is to demonstrate efficient AI-assisted development workflows.

## CORE PRINCIPLES
- Always prioritize type safety and developer experience
- Use AI to accelerate development, not replace critical thinking
- Generate clean, maintainable, and well-documented code
- Follow modern React and Next.js best practices

## TECHNOLOGY STACK RULES

### Next.js 15 & React
- Always use App Router (app directory structure)
- Prefer Server Components unless client-side interactivity is needed
- Use "use client" directive only when necessary
- Follow Next.js 15 conventions for layouts, pages, and API routes
- Implement proper loading.tsx and error.tsx patterns

### TypeScript
- Use strict TypeScript configuration
- Always define proper interfaces and types
- Prefer type assertions over any types
- Use generic types for reusable components
- Export types from dedicated types/ directory

### Database & API
- Use Prisma ORM for all database operations
- Always validate API inputs with Zod schemas
- Return consistent API response structures
- Implement proper error handling with appropriate HTTP status codes
- Use Prisma's type-safe query methods

### UI & Styling
- Use shadcn/ui components exclusively
- Follow shadcn/ui component composition patterns
- Use Tailwind utility classes, avoid custom CSS
- Implement proper responsive design (mobile-first)
- Include accessibility attributes (ARIA labels, roles)

## CODE GENERATION GUIDELINES

### Component Generation
When generating React components:
- Create TypeScript interfaces for all props
- Include proper JSDoc comments for complex logic
- Implement loading and error states where applicable
- Use React.forwardRef for components that need ref forwarding
- Follow the compound component pattern for complex UI

### API Route Generation
When generating API routes:
- Use proper HTTP methods (GET, POST, PATCH, DELETE)
- Implement request validation with Zod
- Include authentication checks where needed
- Return consistent JSON responses with status codes
- Add proper error handling and logging

### Database Operations
When generating Prisma operations:
- Use transaction blocks for related operations
- Implement proper error handling for database failures
- Use Prisma's select and include for optimized queries
- Follow naming conventions for model relationships
- Include proper indexing suggestions in comments

## TESTING REQUIREMENTS

### Unit Tests
- Generate tests for all utility functions
- Test edge cases and error conditions
- Use descriptive test names that explain the scenario
- Include setup and teardown for database tests
- Mock external dependencies properly

### Integration Tests
- Test API routes with realistic request/response cycles
- Test component interactions with user events
- Include authentication scenarios in tests
- Test database operations with test data

## FILE STRUCTURE REQUIREMENTS

### Project Structure
```
taskflow-ai-assisted/
├── src/
│   ├── app/                    # Next.js 15 app router
│   │   ├── (auth)/            # Route groups for auth pages
│   │   ├── api/               # API routes
│   │   ├── dashboard/         # Dashboard pages
│   │   ├── globals.css        # Global styles
│   │   ├── layout.tsx         # Root layout
│   │   └── page.tsx           # Home page
│   ├── components/            # Reusable components
│   │   ├── ui/               # shadcn/ui components
│   │   ├── forms/            # Form components
│   │   ├── layout/           # Layout components
│   │   └── tasks/            # Task-specific components
│   ├── lib/                  # Utility functions
│   │   ├── db.ts            # Database connection
│   │   ├── auth.ts          # Authentication config
│   │   ├── utils.ts         # General utilities
│   │   └── validations.ts   # Zod schemas
│   ├── types/               # TypeScript type definitions
│   └── hooks/               # Custom React hooks
├── prisma/                   # Database schema and migrations
│   ├── schema.prisma        # Database schema
│   └── migrations/          # Database migrations
├── tests/                   # Test files
│   ├── components/          # Component tests
│   ├── api/                # API route tests
│   └── utils/              # Utility function tests
├── docs/                    # Project documentation
├── public/                  # Static assets
├── .cursorrules            # AI development rules
├── .env.example            # Environment variables template
└── README.md               # Project documentation
```

### Import Organization
- Group imports: React, third-party, internal
- Use absolute imports with @ prefix
- Sort imports alphabetically within groups
- Separate type imports from value imports

## PROMPT ENHANCEMENT RULES

### When Providing Context
- Always include relevant file structure when generating components
- Share database schema when generating API routes
- Include existing component patterns for consistency
- Reference current authentication setup for protected routes

### When Requesting Code
- Be specific about the component's purpose and behavior
- Include expected props and their types
- Specify any special requirements (accessibility, performance)
- Mention any existing patterns or conventions to follow

## DOCUMENTATION STANDARDS

### Code Comments
- Add JSDoc comments for complex functions and components
- Include @param and @returns for function documentation
- Add inline comments for business logic
- Document any non-obvious implementation decisions

### README Updates
- Keep setup instructions current with dependencies
- Document environment variables and configuration
- Include examples of API usage
- Add screenshots for UI components

## QUALITY ASSURANCE

### Before Committing
- Ensure all TypeScript errors are resolved
- Run linting and formatting checks
- Verify responsive design works on mobile
- Test authentication flows work correctly
- Confirm database migrations run successfully

### Code Review Focus Areas
- Type safety and error handling
- Performance implications of queries and components
- Accessibility compliance
- Security considerations for authentication and data handling
- Consistency with existing codebase patterns

## AI ASSISTANCE OPTIMIZATION

### Effective Prompting
- Provide specific context about the current feature being built
- Include relevant code snippets when asking for modifications
- Specify the exact file structure and naming conventions
- Mention any dependencies or constraints that affect the implementation

### Iterative Development
- Build features incrementally with AI assistance
- Review and refine AI suggestions before implementing
- Use AI for generating test cases and edge case scenarios
- Leverage AI for refactoring and optimization suggestions

Remember: AI is a powerful tool to accelerate development, but human judgment and review are essential for creating quality, maintainable software.